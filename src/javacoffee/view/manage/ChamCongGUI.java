/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javacoffee.view.manage;

import java.awt.Font;
import java.beans.PropertyChangeEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.sql.Timestamp;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javacoffee.bus.CTCaLam_BUS;
import javacoffee.bus.CaLam_BUS;
import javacoffee.bus.NhanVien_BUS;
import javacoffee.pojo.CTCaLam_pojo;
import javacoffee.pojo.CaLam_pojo;
import javacoffee.pojo.NhanVien_pojo;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kikkdt (KietDt)
 */
public class ChamCongGUI extends javax.swing.JPanel {

    private DefaultTableModel dtm;
    private ArrayList<CaLam_pojo> lstCaLam = new CaLam_BUS().getList();
    private ArrayList<NhanVien_pojo> lstNhanVien = new NhanVien_BUS().getList();
    private static ArrayList<CTCaLam_pojo> lstCTCaLam;
    private static CaLam_BUS calam = new CaLam_BUS();
    private static final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    public ChamCongGUI() {
        initComponents();
        try {
            dateChooser.setDate(sdf.parse(sdf.format(new Date())));
            loadTableChamCong(new Timestamp(sdf.parse(sdf.format(new Date())).getTime()));
        } catch (ParseException ex) {
            Logger.getLogger(ChamCongGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        dateChooser.getDateEditor().addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if ("date".equals(evt.getPropertyName())) {
                try {
                    loadTableChamCong(new Timestamp(sdf.parse(sdf.format(dateChooser.getDate())).getTime()));
                } catch (ParseException ex) {
                    Logger.getLogger(ChamCongGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        btnLuu.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlChamCong = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnLuu = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCTCaLam = new javax.swing.JTable();

        setToolTipText("");
        setMinimumSize(new java.awt.Dimension(1024, 500));
        setPreferredSize(new java.awt.Dimension(1024, 500));

        pnlChamCong.setMinimumSize(new java.awt.Dimension(1024, 500));
        pnlChamCong.setPreferredSize(new java.awt.Dimension(1024, 500));

        jPanel2.setBackground(new java.awt.Color(149, 87, 29));
        jPanel2.setMinimumSize(new java.awt.Dimension(793, 45));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btnLuu.setBackground(new java.awt.Color(149, 87, 29));
        btnLuu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLuu.setForeground(new java.awt.Color(255, 255, 255));
        btnLuu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-save-24.png"))); // NOI18N
        btnLuu.setText("Lưu");
        btnLuu.setToolTipText("Lưu");
        btnLuu.setBorderPainted(false);
        btnLuu.setFocusable(false);
        btnLuu.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnLuu.setMaximumSize(new java.awt.Dimension(100, 35));
        btnLuu.setMinimumSize(new java.awt.Dimension(100, 35));
        btnLuu.setPreferredSize(new java.awt.Dimension(100, 35));
        btnLuu.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuActionPerformed(evt);
            }
        });
        jPanel2.add(btnLuu);

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 2, 2, 2, new java.awt.Color(149, 87, 29)));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tìm nhân viên:");
        jLabel1.setToolTipText("Tìm nhân viên");

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-search-24.png"))); // NOI18N
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setLabelFor(dateChooser);
        jLabel3.setText("Ngày chấm công:");
        jLabel3.setToolTipText("Ngày chấm công");

        dateChooser.setToolTipText("Chọn ngày chấm công");
        dateChooser.setDateFormatString("dd/MM/yyyy");
        dateChooser.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        dateChooser.setIcon(new ImageIcon(getClass().getResource("/icons8-calendar-24.png")));
        dateChooser.setMaxSelectableDate(new java.util.Date());
        dateChooser.setMaximumSize(new java.awt.Dimension(200, 30));
        dateChooser.setMinimumSize(new java.awt.Dimension(200, 30));
        dateChooser.setPreferredSize(new java.awt.Dimension(200, 30));

        jScrollPane1.setBorder(null);

        tblCTCaLam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCTCaLam.setOpaque(false);
        tblCTCaLam.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblCTCaLamFocusLost(evt);
            }
        });
        tblCTCaLam.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblCTCaLamPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(tblCTCaLam);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearch)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout pnlChamCongLayout = new javax.swing.GroupLayout(pnlChamCong);
        pnlChamCong.setLayout(pnlChamCongLayout);
        pnlChamCongLayout.setHorizontalGroup(
            pnlChamCongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlChamCongLayout.setVerticalGroup(
            pnlChamCongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChamCongLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1024, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(pnlChamCong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(pnlChamCong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String strSearch = "^.*" + txtSearch.getText().toLowerCase() + ".*$";
        dtm = (DefaultTableModel) tblCTCaLam.getModel();
        dtm.setRowCount(0);
        lstNhanVien.stream().filter(nv -> (String.valueOf(nv.getMaNV()).matches(strSearch) || nv.getTenNV().toLowerCase().matches(strSearch))).forEachOrdered(nv -> {
            dtm.addRow(new Object[]{
                nv.getMaNV(),
                nv.getTenNV(),});
        });

        if (!lstCTCaLam.isEmpty()) {
            for (CTCaLam_pojo item : lstCTCaLam) {
                for (int i = 0; i < tblCTCaLam.getRowCount(); i++) {
                    if (tblCTCaLam.getValueAt(i, 0).equals(item.getMaNV())) {
                        int indexColumn = getColumnIndex(tblCTCaLam, calam.getTenCaLam(item.getMaCaLam()));
                        dtm.setValueAt(true, i, indexColumn);
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuActionPerformed
        Timestamp ngayLam;
        try {
            ngayLam = new Timestamp(sdf.parse(sdf.format(dateChooser.getDate())).getTime());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ngày chấm công không đúng, mời thử lại.", "Lỗi", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource("/error.png")));
            return;
        }
        if (lstCaLam.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Lỗi, danh sách ca làm hiện đang trống.", "Lỗi", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource("/error.png")));
            return;
        }
        CTCaLam_BUS ctCaLam = new CTCaLam_BUS();
        for (int i = 0; i < tblCTCaLam.getRowCount(); i++) {
            int maNV = Integer.parseInt(dtm.getValueAt(i, 0).toString());
            for (int j = 2; j < tblCTCaLam.getColumnCount(); j++) {
                int maCaLam = calam.getMaCaLam(tblCTCaLam.getColumnName(j));
                //If it already exists and isn't checked, delete it
                if (ctCaLam.isExist(maNV, maCaLam, ngayLam)) {
                    if ((boolean) tblCTCaLam.getValueAt(i, j) == false) {
                        ctCaLam.delete(maNV, maCaLam, ngayLam);
                    }
                } else {
                    if ((boolean) tblCTCaLam.getValueAt(i, j) == true) {
                        ctCaLam.insert(maNV, maCaLam, ngayLam);
                    }
                }
            }
        }
        btnLuu.setEnabled(false);
        btnLuu.setActionCommand("performed");
        JOptionPane.showMessageDialog(null, "Lưu thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnLuuActionPerformed

    private void tblCTCaLamFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblCTCaLamFocusLost
        String tmp = evt.getSource().toString();
        if (!"performed".equals(btnLuu.getActionCommand()) && evt.getSource() != btnLuu) {
            int chosen = JOptionPane.showConfirmDialog(null, "Bảng chấm công chưa được lưu. Bạn có muốn lưu không?", "Thông báo", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
            if (chosen == JOptionPane.YES_OPTION) {
                btnLuu.doClick();
            }
        }
    }//GEN-LAST:event_tblCTCaLamFocusLost

    private void tblCTCaLamPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblCTCaLamPropertyChange
        if ("tableCellEditor".equals(evt.getPropertyName())) {
            //Editing started;
            if (tblCTCaLam.isEditing()) {
                btnLuu.setEnabled(true);
                btnLuu.setActionCommand("");
            }
        }
    }//GEN-LAST:event_tblCTCaLamPropertyChange

    private int getColumnIndex(JTable table, String header) {
        for (int i = 0; i < table.getColumnCount(); i++) {
            if (table.getColumnName(i).equals(header)) {
                return i;
            }
        }
        return -1;
    }

    private void loadTableChamCong(Timestamp ngayLam) {
        lstCaLam = new CaLam_BUS().getList();
        lstNhanVien = new NhanVien_BUS().getList();
        if (lstCaLam.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Lỗi, danh sách ca làm hiện đang trống.", "Lỗi", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource("/error.png")));
            return;
        }
        if (lstNhanVien.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Lỗi, danh sách nhân viên hiện đang trống.", "Lỗi", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource("/error.png")));
            return;
        }

        tblCTCaLam.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
        tblCTCaLam.getTableHeader().setReorderingAllowed(false);
        tblCTCaLam.setRowHeight(24);
        tblCTCaLam.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        tblCTCaLam.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        //Set DefaultTableModel & add header table
        tblCTCaLam.setModel(new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //First and Second column are false
                return (column > 1);
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0 || columnIndex == 1) {
                    return String.class;
                } else {
                    return Boolean.class;
                }
            }
        });

        dtm = (DefaultTableModel) tblCTCaLam.getModel();
        dtm.setColumnCount(0);
        dtm.setRowCount(0);
        dtm.addColumn("Mã Nhân viên");
        dtm.addColumn("Tên Nhân viên");
        lstCaLam.forEach((CaLam_pojo item) -> {
            dtm.addColumn(item.getTenCaLam());
        });

        //Setting column width & turn off resizable
        int size = 2 + lstCaLam.size();
        for (int i = 0; i < size; i++) {
            tblCTCaLam.getColumnModel().getColumn(i).setResizable(false);
        }
        tblCTCaLam.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        lstNhanVien.forEach((NhanVien_pojo nv) -> {
            Vector v = new Vector();
            v.add(nv.getMaNV());
            v.add(nv.getTenNV());
            lstCaLam.forEach(_item -> {
                v.add(false);
            });
            dtm.addRow(v);
        });

        lstCTCaLam = new CTCaLam_BUS().getList(ngayLam);
        if (!lstCTCaLam.isEmpty()) {
            for (CTCaLam_pojo item : lstCTCaLam) {
                for (int i = 0; i < tblCTCaLam.getRowCount(); i++) {
                    if (tblCTCaLam.getValueAt(i, 0).equals(item.getMaNV())) {
                        int indexColumn = getColumnIndex(tblCTCaLam, calam.getTenCaLam(item.getMaCaLam()));
                        dtm.setValueAt(true, i, indexColumn);
                        break;
                    }
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLuu;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlChamCong;
    private javax.swing.JTable tblCTCaLam;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
